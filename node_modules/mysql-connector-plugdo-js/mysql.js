const mssql = require("mysql");
const jr = require("./plugdo-json-reader.js").jsonReader();

const mysql = {
    callback: true,
    options: {
        server: {
            connectionLimit : 100,
            user: "",
            password: "",
            host: "",
            database: "",
            port: 3306
        },
        queryType: "text",
        query: "",
        parameter: []
    },
    get: function (message, callback) {
        let rows = { Database: [] };
        let pool = new mssql.createPool(this.options.server);

        pool.getConnection((error, request) => {
            if(error) {
                callback({}, error);

                if(request !== undefined) {
                    request.destroy();
                }
            }
            else {
                let parameterData = [];
                this.options.parameter.forEach((element) => {
                    if(element.indexOf(":") != -1) {
                        if(element.substring(0, 5) != "json:")
                            throw new Error("Error reading the json message, use 'json:propertyName'");
                        
                        element = element.replace("json:", "");
                        let fixedStr = jr.read(element, message);
                        parameterData.push(fixedStr);
                    }
                    else {
                        parameterData.push(element);
                    }
                });

                var sp_params = "";
                if(this.options.queryType == "stored-procedure" && parameterData.length > 0) {
                    //let strParam = parameterData.join();
                    let fixedParameterData = [];
                    parameterData.forEach((element) => {
                        fixedParameterData.push(`'${element}'`);
                    });

                    let strParam = fixedParameterData.join();
                    sp_params = `(${strParam})`;
                    //sp_params = `('${strParam}')`;
                    parameterData = [];
                }

                request.query(this.options.query + sp_params, parameterData, (err, rs, fields) => {
                    if(err) {
                        callback({}, err);
                    }
                    else {
                        let table = { Table: { Row: [], Result: {} } };
                        let totalFields = fields.length;
                        
						rs.forEach(element => {
							table.Table.Row.push(element);
						});
					
                        rows.ConnectionPool = {
                            limit: pool.config.connectionLimit,
                            free: pool._freeConnections.length,
                            connections: pool._allConnections.length,
                            acquiring: pool._acquiringConnections.length
                        };

                        rows.Database.push(table);
                        
                        callback(rows);
                    }

                    if(request !== undefined) {
                        request.destroy();
                    }
                });
            }
        });


    }
};

exports.mysql = function () {
    return mysql;
};